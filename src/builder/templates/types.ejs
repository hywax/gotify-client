export type QueryParamsType = Record<string | number, any>
export type HttpFormat = keyof Omit<Body, 'body' | 'bodyUsed'>

export enum HttpContentType {
  Json = 'application/json',
  FormData = 'multipart/form-data',
  UrlEncoded = 'application/x-www-form-urlencoded',
  Text = 'text/plain',
}

export interface HttpClient {
  request<Result>(url: string, params?: HttpRequestParams): Promise<Result>
}

export interface HttpRequestParams {
  query?: QueryParamsType
  body?: unknown
  method?: string
  type?: HttpContentType
  format?: HttpFormat
}

export interface HttpAuthKeys {
  app?: string
  client?: string
}

export type IfEquals<X, Y, A=X, B=never> =
  (<T>() => T extends X ? 1 : 2) extends
  (<T>() => T extends Y ? 1 : 2) ? A : B;

export type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>
}[keyof T];

export type ReadonlyKeys<T> = {
  [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>
}[keyof T];

export type Writable<T> = Pick<T, WritableKeys<T>>
